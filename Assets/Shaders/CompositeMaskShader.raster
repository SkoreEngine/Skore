// MIT License
//
// Copyright (c) 2025 Paulo Marangoni (Daethalus)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


struct VertexOutput
{
    float4 position : SV_Position;
    float2 uv : TEXCOORD0;
};

VertexOutput MainVS(uint vertexIndex : SV_VertexID)
{
	VertexOutput output;
	output.uv = float2((vertexIndex << 1) & 2, vertexIndex & 2);
	output.position = float4(output.uv * 2.0f - 1.0f, 0.0f, 1.0f);
	return output;
}

SamplerState samplerState : register(s0);
Texture2D     texture     : register(t1);


float4 MainPS(VertexOutput input) : SV_TARGET
{
    float4 pixel = texture.Sample(samplerState, input.uv);

    // Signed distance (squared)
    float dist = sqrt(pixel.z);
    float alpha = smoothstep(0.004f, 0.002f, dist);

    if (alpha == 0.0)
        discard;

    float3 outlineColor = float3(1.0f, 0.5f, 0.0f);
    return float4(outlineColor, alpha);
}