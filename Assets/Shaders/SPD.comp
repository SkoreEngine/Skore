// MIT License
//
// Copyright (c) 2025 Paulo Marangoni (Daethalus)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#define A_GPU
#define A_HLSL
#define SPD_NO_WAVE_OPERATIONS
#define SPD_LINEAR_SAMPLER

#define AVERAGE 1

#include "FidelityFX/ffx_a.h"

groupshared AF4 spdIntermediate[16][16];
groupshared AU1 spdCounter;


globallycoherent  RWStructuredBuffer<uint>     atomicCounter      : register(u0);
                  Texture2D                    inputTexture       : register(t1);
globallycoherent  RWTexture2D<float4>          textureOutputs[12] : register(u2);
                  SamplerState                 linearSampler      : register(s3);

struct DownscaleData
{
	float4 mipInfo;
};

[[vk::push_constant]] DownscaleData pushData;

AF4 SpdLoadSourceImage(ASU2 p, AU1 slice)
{
	float2 uv = (p + 0.5f) / pushData.mipInfo.zw;
	return inputTexture.SampleLevel(linearSampler, uv, 0);
}

AF4 SpdLoad(ASU2 pos, AU1 slice)
{
	return textureOutputs[5][pos];
}

void SpdStore(ASU2 pos, AF4 value, AU1 index, AU1 slice)
{
	textureOutputs[index][pos] = value;
}

AF4 SpdLoadIntermediate(AU1 x, AU1 y)
{
	return spdIntermediate[x][y];
}

void SpdStoreIntermediate(AU1 x, AU1 y, AF4 value)
{
	spdIntermediate[x][y] = value;
}

AF4 SpdReduce4(AF4 s1, AF4 s2, AF4 s3, AF4 s4)
{
#if AVERAGE
	return (s1 + s2 + s3 + s4) * 0.25f;
#elif MAX
	return max(max(s1, s2), max(s3, s4));
#endif
	return 0.0f;
}

void SpdIncreaseAtomicCounter(AU1 slice)
{
	InterlockedAdd(atomicCounter[0], 1, spdCounter);
}

AU1 SpdGetAtomicCounter()
{
	return spdCounter;
}

void SpdResetAtomicCounter(AU1 slice)
{
	atomicCounter[0] = 0;
}

#include "FidelityFX/ffx_spd.h"

[numthreads(256, 1, 1)]
void MainCS(uint3 workGroupID : SV_GroupID, uint localThreadIndex : SV_GroupIndex)
{
    const float2 f2Value  = pushData.mipInfo.xy;
	float mipCount = f2Value.x;
	float workGroupCount = f2Value.y;
	SpdDownsample(workGroupID.xy, localThreadIndex, mipCount, workGroupCount, workGroupID.z);
}

