// MIT License
//
// Copyright (c) 2025 Paulo Marangoni (Daethalus)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include "Common.hlsli"

struct SkyboxConstants
{
	float4x4 viewProjection;
};

[[vk::push_constant]] SkyboxConstants skyboxConstants;

Texture2D     panoramicTexture : register(t0);
SamplerState  samplerState  : register(s1);

struct PSInput
{
	float4 Position : SV_POSITION;
	float3 TexCoord : TEXCOORD0;
};

PSInput MainVS(uint vertexID : SV_VertexID)
{
	PSInput output;


	static const float3 CubePositions[8] =
	{
		float3(-1, -1, -1),
		float3( 1, -1, -1),
		float3(-1,  1, -1),
		float3( 1,  1, -1),
		float3(-1, -1,  1),
		float3( 1, -1,  1),
		float3(-1,  1,  1),
		float3( 1,  1,  1)
	};

	static const uint CubeIndices[36] =
	{
		0, 2, 1, 1, 2, 3,
		4, 5, 6, 5, 7, 6,
		0, 4, 2, 2, 4, 6,
		1, 3, 5, 3, 7, 5,
		0, 1, 4, 1, 5, 4,
		2, 6, 3, 3, 6, 7
	};

	uint index = vertexID % 36;
	float3 position = CubePositions[CubeIndices[index]];
    output.Position = mul(skyboxConstants.viewProjection, float4(position, 1.0)).xyww;
	output.TexCoord = position;
	return output;
}




float4 MainPS(PSInput input) : SV_TARGET
{

    float3 dir = normalize(input.TexCoord);

    // Convert direction vector to equirectangular coordinates
    float2 uv;
    uv.x = 0.5 + (atan2(dir.z, dir.x) / (2.0 * PI));
    uv.y = 0.5 - (asin(dir.y) / PI);

	return panoramicTexture.SampleLevel(samplerState, uv, 0);
}